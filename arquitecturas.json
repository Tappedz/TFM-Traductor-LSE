
{
  "arquitecturas": [
    {
      "nombre": "CNN",
      "descripcion": "Convolutional Neural Network para clasificación de imágenes.",
      "accuracy (test)": "N/A",
      "codigo": "model = models.Sequential([ layers.Conv2D(32, 3, activation='relu',kernel_regularizer=l2(1e-4)), layers.BatchNormalization(), layers.MaxPooling2D(), layers.Dropout(0.2), layers.Conv2D(64, 3, activation='relu',kernel_regularizer=l2(1e-4)), layers.BatchNormalization(), layers.MaxPooling2D(), layers.Dropout(0.2), layers.Conv2D(128, 3, activation='relu',kernel_regularizer=l2(1e-4)), layers.BatchNormalization(), layers.MaxPooling2D(), layers.Conv2D(256, 3, activation='relu',kernel_regularizer=l2(1e-4)), layers.BatchNormalization(), layers.MaxPooling2D(), layers.Dropout(0.2), layers.Conv2D(512, 3, activation='relu',kernel_regularizer=l2(1e-4)), layers.BatchNormalization(), layers.MaxPooling2D(), layers.Dropout(0.2), layers.GlobalAveragePooling2D(), layers.Dropout(0.2),  layers.Dense(256, activation='relu',kernel_regularizer=l2(1e-4)), layers.BatchNormalization(), layers.Dropout(0.2), layers.Dense(128, activation='relu',kernel_regularizer=l2(1e-4)), layers.BatchNormalization(), layers.Dropout(0.3), layers.Dense(num_classes, activation='softmax')"
    },
    {
      "nombre": "CNN",
      "descripcion": "Convolutional Neural Network para clasificación de imágenes.",
      "accuracy (test)": 0.19,
      "codigo": "layers.Conv2D(32, 3, activation='relu',kernel_regularizer=l2(1e-4)),layers.BatchNormalization(),layers.MaxPooling2D(),layers.Dropout(0.2),layers.Conv2D(64, 3, activation='relu',kernel_regularizer=l2(1e-4)),layers.BatchNormalization(),layers.MaxPooling2D(),layers.Dropout(0.2),layers.Conv2D(128, 3, activation='relu',kernel_regularizer=l2(1e-4)),layers.BatchNormalization(),layers.MaxPooling2D(),layers.Conv2D(256, 3, activation='relu',kernel_regularizer=l2(1e-4)),layers.BatchNormalization(),layers.MaxPooling2D(),layers.Dropout(0.2),layers.GlobalAveragePooling2D(),layers.Dropout(0.2)layers.Dense(128, activation='relu',kernel_regularizer=l2(1e-4)),layers.BatchNormalization(),layers.Dropout(0.3),layers.Dense(num_classes, activation='softmax')"
    },
    {
      "nombre": "CNN",
      "descripcion": "Convolutional Neural Network para clasificación de imágenes.",
      "accuracy (test)": 0.05,
      "codigo": "layers.Conv2D(32, 3, activation='relu', kernel_regularizer=l2(1e-4), padding='same', input_shape=(IMG_HEIGHT, IMG_WIDTH, 3)),layers.BatchNormalization(),layers.Conv2D(32, 3, activation='relu', kernel_regularizer=l2(1e-4), padding='same'),layers.BatchNormalization(),layers.MaxPooling2D(),layers.SpatialDropout2D(0.2),layers.Conv2D(64, 3, activation='relu', kernel_regularizer=l2(1e-4), padding='same'),layers.BatchNormalization(),layers.Conv2D(64, 3, activation='relu', kernel_regularizer=l2(1e-4), padding='same'),layers.BatchNormalization(),layers.MaxPooling2D(),layers.SpatialDropout2D(0.3),layers.Conv2D(128, 3, activation='relu', kernel_regularizer=l2(1e-4), padding='same'),layers.BatchNormalization(),layers.Conv2D(128, 3, activation='relu', kernel_regularizer=l2(1e-4), padding='same'),layers.BatchNormalization(),layers.MaxPooling2D(),layers.SpatialDropout2D(0.4),layers.GlobalAveragePooling2D(),layers.Dropout(0.4),layers.Dense(128, activation='relu', kernel_regularizer=l2(1e-4)),layers.BatchNormalization(),layers.Dropout(0.5),layers.Dense(num_classes, activation='softmax')"
    },
    {
      "nombre": "CNN",
      "descripcion": "Convolutional Neural Network para clasificación de imágenes.",
      "accuracy (test)": 0.08,
      "codigo": "layers.Conv2D(32, 3, activation='relu', kernel_regularizer=l2(1e-4), padding='same', input_shape=(512, 512, 3)),layers.BatchNormalization(),layers.Conv2D(32, 3, activation='relu', kernel_regularizer=l2(1e-4), padding='same'),layers.BatchNormalization(),layers.MaxPooling2D(),layers.SpatialDropout2D(0.2),layers.Conv2D(64, 3, activation='relu', kernel_regularizer=l2(1e-4), padding='same'),layers.BatchNormalization(),layers.Conv2D(64, 3, activation='relu', kernel_regularizer=l2(1e-4), padding='same'),layers.BatchNormalization(),layers.MaxPooling2D(),layers.SpatialDropout2D(0.2),layers.Conv2D(128, 3, activation='relu', kernel_regularizer=l2(1e-4), padding='same'),layers.BatchNormalization(),layers.Conv2D(128, 3, activation='relu', kernel_regularizer=l2(1e-4), padding='same'),layers.BatchNormalization(),layers.MaxPooling2D(),layers.SpatialDropout2D(0.2),layers.GlobalAveragePooling2D(),layers.Dense(128, activation='relu', kernel_regularizer=l2(1e-4)),layers.BatchNormalization(),layers.Dropout(0.2),layers.Dense(num_classes, activation='softmax')])"
    }
  ]
}